/** 
 * MouseRun. A programming game to practice building intelligent things.
 * Copyright (C) 2013  Muhammad Mustaqim
 * 
 * This file is part of MouseRun.
 *
 * MouseRun is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MouseRun is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MouseRun.  If not, see <http://www.gnu.org/licenses/>.
 **/
package mouserun.game;

import java.util.*;
import java.lang.reflect.*;

/**
 * Class GameController is the brain of the game. It controls the events that occurred 
 * in the game to signal the start and end of the game, the moment a cheese has been 
 * taken and bombs detonated etc. The GameController will communicate to the 
 * Game Interface through the GameControllerAdapter interface.
 */
public class GameController
{

	private Maze maze;
	private int gridSize;
	private GameControllerAdapter adapter;
	private int numberOfCheese;
	private int numberOfCheeseTaken;
	
	/**
	 * Creates an instance of the controller. 
	 * @param adapter The adapter that is responsible for picking up events from the controller and manipulate the game interface.
	 * @param width The number of horizontal grids.
	 * @param height The number of vertical grids. 
	 * @param gridSize The width and height of each cell.
	 * @param numberOfCheese The number of cheese to play for.
	 */
	public GameController(GameControllerAdapter adapter, int width, int height, int gridSize, int numberOfCheese)
	{
		this.adapter = adapter;
		this.maze = new Maze(width, height);
		this.gridSize = gridSize;
		
		this.numberOfCheese = numberOfCheese;
		this.numberOfCheeseTaken = 0;
		
	}
	
	/**
	 * Retrieve the maze that was generated by the controller.
	 * @return The Maze of the game.
	 */
	public Maze getMaze()
	{
		return this.maze;
	}
	
	/**
	 * Causes the game to begin. This will load all instances of Mouse call
	 * that conforms to the game set and signal the adapter to prepare for the game
	 * to begin.
	 */
	public void start()
	{
		
		Grid origin = maze.getGrid(0, 0);

		
		adapter.start();
	}

	// Gets a random grid from the maze.
	private Grid getRandomGrid()
	{
		Random random = new Random();
		Grid grid = maze.getGrid(random.nextInt(maze.getWidth()), random.nextInt(maze.getHeight()));
		
		return grid;
	}
	

	/**
	 * Gets the actual X-axis on the game interface given the maze X-axis value.
	 * @param x The X-axis value on the maze.
	 * @return The X-axis value on the game interface
	 */
	public int getGridLeft(int x)
	{
		return x * gridSize;
	}
	
	/**
	 * Gets the actual Y-axis on the game interface given the maze Y-axis value.
	 * @param y The Y-axis value on the maze.
	 * @return The Y-axis value on the game interface.
	 */
	public int getGridTop(int y)
	{
		return (maze.getHeight() - y - 1) * gridSize;
	}
	
}